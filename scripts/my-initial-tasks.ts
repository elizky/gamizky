import { db } from '../server/db/prisma';
import { calculateTaskRewards } from '../lib/gamification';

// üéØ TAREAS INICIALES PERSONALIZADAS PARA TONGA
// Basadas en tus preferencias espec√≠ficas
const MY_INITIAL_TASKS = [
  // üí™ F√çSICO - Ejercicio y salud
  {
    title: 'Hacer 30 minutos de ejercicio',
    description: 'Cualquier actividad f√≠sica: caminar, correr, gym, yoga',
    categoryName: 'F√≠sico',
    subcategory: 'Cardio',
    difficulty: 'medium' as const,
    duration: 30,
    recurring: true,
    recurringType: 'daily' as const,
  },
  {
    title: 'Beber 2L de agua',
    description: 'Mantener hidrataci√≥n durante el d√≠a',
    categoryName: 'F√≠sico',
    subcategory: 'Salud',
    difficulty: 'easy' as const,
    duration: 0, // No toma tiempo espec√≠fico
    recurring: true,
    recurringType: 'daily' as const,
  },
  {
    title: 'Dormir 8 horas',
    description: 'Descanso completo para recuperaci√≥n',
    categoryName: 'F√≠sico',
    subcategory: 'Descanso',
    difficulty: 'medium' as const,
    duration: 480, // 8 horas = 480 minutos
    recurring: true,
    recurringType: 'daily' as const,
  },
  {
    title: 'No tomar alcohol',
    description: 'Mantener sobriedad por un d√≠a m√°s',
    categoryName: 'F√≠sico',
    subcategory: 'Autocontrol',
    difficulty: 'hard' as const,
    duration: 0, // Es un h√°bito de todo el d√≠a
    recurring: true,
    recurringType: 'daily' as const,
  },
  {
    title: 'No pedir delivery',
    description: 'Preparar y comer en casa sin pedir comida afuera',
    categoryName: 'F√≠sico',
    subcategory: 'Alimentaci√≥n',
    difficulty: 'medium' as const,
    duration: 60, // Tiempo de cocinar
    recurring: true,
    recurringType: 'daily' as const,
  },
  {
    title: 'No comer pan',
    description: 'Evitar pan durante el d√≠a como reto nutricional',
    categoryName: 'F√≠sico',
    subcategory: 'Alimentaci√≥n',
    difficulty: 'medium' as const,
    duration: 0, // Es un h√°bito de todo el d√≠a
    recurring: true,
    recurringType: 'daily' as const,
  },
  {
    title: 'Ir al gimnasio o jugar tenis / salir a caminar o correr',
    description: 'Elegir alguna actividad f√≠sica de mayor intensidad',
    categoryName: 'F√≠sico',
    subcategory: 'Cardio / Deporte',
    difficulty: 'medium' as const,
    duration: 60,
    recurring: true,
    recurringType: 'daily' as const,
  },

  // üìö SABIDUR√çA - Lectura y conocimiento
  {
    title: 'Leer 20 p√°ginas',
    description: 'Continuar con el libro actual',
    categoryName: 'Sabidur√≠a',
    subcategory: 'Lectura',
    difficulty: 'easy' as const,
    duration: 25,
    recurring: true,
    recurringType: 'daily' as const,
  },

  // üß† MENTAL - Mindfulness y planeamiento
  {
    title: 'Meditar 15 minutos',
    description: 'Pr√°ctica de mindfulness y relajaci√≥n',
    categoryName: 'Mental',
    subcategory: 'Mindfulness',
    difficulty: 'easy' as const,
    duration: 15,
    recurring: true,
    recurringType: 'daily' as const,
  },
  {
    title: 'Planificar mi semana',
    description: 'Organizar tareas personales y laborales',
    categoryName: 'Mental',
    subcategory: 'Planeamiento',
    difficulty: 'medium' as const,
    duration: 30,
    recurring: true,
    recurringType: 'weekly' as const,
  },

  // üé® CREATIVIDAD - M√∫sica y escritura
  {
    title: 'Dedicar 30 minutos a mi proyecto de m√∫sica',
    description: 'Componer, grabar, practicar o producir',
    categoryName: 'Creatividad',
    subcategory: 'M√∫sica',
    difficulty: 'medium' as const,
    duration: 30,
    recurring: true,
    recurringType: 'daily' as const,
  },
  {
    title: 'Escribir un p√°rrafo creativo',
    description: 'Poema, cuento corto, reflexi√≥n personal',
    categoryName: 'Creatividad',
    subcategory: 'Escritura',
    difficulty: 'medium' as const,
    duration: 20,
    recurring: true,
    recurringType: 'x_per_week' as const,
    recurringTarget: 3, // 3 veces por semana
  },
];

async function loadMyInitialTasks() {
  try {
    console.log('üå± Cargando tus tareas iniciales personalizadas...');

    // Obtener categor√≠as y usuario espec√≠fico
    const categories = await db.taskCategory.findMany();
    const user = await db.user.findUnique({
      where: { id: 'cmf0gl7k6000016tocb9fy2k4' }
    });

    if (!user) {
      console.log('‚ùå No se encontr√≥ usuario');
      return;
    }

    let createdCount = 0;

    for (const taskData of MY_INITIAL_TASKS) {
      // Buscar la categor√≠a
      const category = categories.find((c) => c.name === taskData.categoryName);
      if (!category) {
        console.log(`‚ö†Ô∏è  Categor√≠a no encontrada: ${taskData.categoryName}`);
        continue;
      }

      // Calcular recompensas autom√°ticamente
      const rewards = calculateTaskRewards(
        taskData.difficulty,
        taskData.duration,
        category.primarySkill
      );

      // Crear la tarea
      await db.task.create({
        data: {
          title: taskData.title,
          description: taskData.description,
          subcategory:
            'subcategory' in taskData ? (taskData as { subcategory: string }).subcategory : null,
          difficulty: taskData.difficulty,
          estimatedDuration: taskData.duration,
          coinReward: rewards.coinReward,
          skillRewards: rewards.skillRewards,
          recurring: taskData.recurring,
          recurringType: taskData.recurringType,
          recurringTarget: taskData.recurringTarget,
          completions: [],
          categoryId: category.id,
          userId: user.id,
        },
      });

      console.log(`‚úÖ ${taskData.title} - ${rewards.totalXP} XP, ${rewards.coinReward} monedas`);
      createdCount++;
    }

    console.log('');
    console.log(`üéâ ¬°Listas! ${createdCount} tareas personalizadas creadas`);
    console.log('¬°Ya puedes empezar a usar tu app de gamificaci√≥n! üöÄ');
  } catch (error) {
    console.error('‚ùå Error cargando tareas:', error);
  } finally {
    await db.$disconnect();
  }
}

// Exportar para uso externo
export { MY_INITIAL_TASKS, loadMyInitialTasks as createInitialTasks };

// Ejecutar si se llama directamente
if (require.main === module) {
  loadMyInitialTasks();
}
