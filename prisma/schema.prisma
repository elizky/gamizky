generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  // Gamification fields
  level   Int    @default(1)
  totalXP Int    @default(0)
  coins   Int    @default(0)
  streak  Int    @default(0)
  avatar  String @default("ðŸŽ®")

  // Relations
  accounts   Account[]
  characters UserCharacter[]
  skills     UserSkill[]
  tasks      Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Character {
  id       String  @id @default(cuid())
  name     String
  avatar   String
  unlocked Boolean @default(false)
  cost     Int?

  // Relations
  userCharacters UserCharacter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCharacter {
  id          String   @id @default(cuid())
  userId      String
  characterId String
  unlockedAt  DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
}

model UserSkill {
  id            String @id @default(cuid())
  userId        String
  skillType     String // "physical", "wisdom", "mental", "social", "creativity", "discipline"
  level         Int    @default(1)
  currentXP     Int    @default(0)
  totalXP       Int    @default(0)
  xpToNextLevel Int    @default(200)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillType])
}

model TaskCategory {
  id            String   @id @default(cuid())
  name          String
  icon          String
  color         String
  description   String
  primarySkill  String // "physical", "wisdom", "mental", "social", "creativity", "discipline"
  subcategories String[] // Array of subcategory names

  // Relations
  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id                String    @id @default(cuid())
  title             String
  description       String
  subcategory       String?
  difficulty        String // "easy", "medium", "hard"
  coinReward        Int
  completed         Boolean   @default(false)
  completedAt       DateTime?
  dueDate           DateTime?
  recurring         Boolean   @default(false)
  recurringType     String? // "daily", "weekly", "monthly"
  scheduledFor      DateTime?
  spontaneous       Boolean   @default(false)
  estimatedDuration Int? // in minutes

  // Skill rewards as JSON object
  skillRewards Json @default("{}")

  // Relations
  categoryId String
  category   TaskCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
