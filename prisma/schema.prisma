generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  // Gamification fields
  level   Int    @default(1)
  totalXP Int    @default(0)
  coins   Int    @default(0)
  streak  Int    @default(0)
  avatar  String @default("ðŸŽ®")

  // Relations
  accounts       Account[]
  characters     UserCharacter[]
  skills         UserSkill[]
  tasks          Task[]
  rewards        UserReward[]
  achievements   UserAchievement[]
  calendarEvents CalendarEvent[]
  challenges     UserChallenge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Character {
  id       String  @id @default(cuid())
  name     String
  avatar   String
  unlocked Boolean @default(false)
  cost     Int?

  // Relations
  userCharacters UserCharacter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCharacter {
  id          String   @id @default(cuid())
  userId      String
  characterId String
  unlockedAt  DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([userId, characterId])
}

model UserSkill {
  id            String @id @default(cuid())
  userId        String
  skillType     String // "physical", "wisdom", "mental", "social", "creativity", "discipline"
  level         Int    @default(1)
  currentXP     Int    @default(0)
  totalXP       Int    @default(0)
  xpToNextLevel Int    @default(200)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillType])
}

model TaskCategory {
  id            String   @id @default(cuid())
  name          String
  icon          String
  color         String
  description   String
  primarySkill  String // "physical", "wisdom", "mental", "social", "creativity", "discipline"
  subcategories String[] // Array of subcategory names

  // Relations
  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id                String    @id @default(cuid())
  title             String
  description       String
  subcategory       String?
  difficulty        String // "easy", "medium", "hard"
  coinReward        Int
  completed         Boolean   @default(false)
  completedAt       DateTime?
  dueDate           DateTime?
  recurring         Boolean   @default(false)
  recurringType     String? // "daily", "weekly", "monthly"
  scheduledFor      DateTime?
  spontaneous       Boolean   @default(false)
  estimatedDuration Int? // in minutes

  // Skill rewards as JSON object (matching mockTasks structure)
  skillRewards Json @default("{}")

  // Relations
  categoryId String
  category   TaskCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  calendarEvents CalendarEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reward {
  id          String  @id @default(cuid())
  title       String
  description String
  cost        Int
  type        String // "internal", "external", "cosmetic", "character"
  category    String
  icon        String
  available   Boolean @default(true)
  rarity      String? // "common", "rare", "epic", "legendary"

  // Relations
  userRewards UserReward[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Challenge {
  id          String @id @default(cuid())
  title       String
  description String
  icon        String
  type        String // "daily", "weekly", "skill", "diversity", "temporal"
  difficulty  String // "easy", "medium", "hard", "epic"
  
  // Recompensas del challenge
  xpReward    Int    @default(0)
  coinReward  Int    @default(0)
  
  // Requisitos del challenge (JSON)
  requirements Json  @default("{}")
  
  // Fechas de disponibilidad
  startDate   DateTime?
  endDate     DateTime?
  
  // Estado del challenge
  active      Boolean @default(true)
  featured    Boolean @default(false)
  
  // Metadata
  rarity      String? // "common", "rare", "epic", "legendary"
  category    String? // "fitness", "learning", "social", etc.
  
  // Relations
  userChallenges UserChallenge[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserChallenge {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  
  // Progreso del challenge
  progress    Int       @default(0)
  target      Int       @default(1)
  completed   Boolean   @default(false)
  completedAt DateTime?
  
  // Metadata del progreso (JSON para flexibilidad)
  progressData Json     @default("{}")
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
}

model UserReward {
  id        String    @id @default(cuid())
  userId    String
  rewardId  String
  claimed   Boolean   @default(false)
  claimedAt DateTime?

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@unique([userId, rewardId])
}

model Achievement {
  id          String  @id @default(cuid())
  title       String
  description String
  icon        String
  requirement String
  rarity      String? // "common", "rare", "epic", "legendary"

  // Relations
  userAchievements UserAchievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlocked      Boolean   @default(false)
  unlockedAt    DateTime?

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model CalendarEvent {
  id        String   @id @default(cuid())
  date      DateTime
  completed Boolean  @default(false)
  type      String // "scheduled", "recurring"

  // Relations
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
